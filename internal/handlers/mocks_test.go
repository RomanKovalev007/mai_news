// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package handlers

import (
	"github.com/RomanKovalev007/mai_news/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockPoster creates a new instance of MockPoster. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPoster(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPoster {
	mock := &MockPoster{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPoster is an autogenerated mock type for the Poster type
type MockPoster struct {
	mock.Mock
}

type MockPoster_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPoster) EXPECT() *MockPoster_Expecter {
	return &MockPoster_Expecter{mock: &_m.Mock}
}

// DeletePost provides a mock function for the type MockPoster
func (_mock *MockPoster) DeletePost(id int) error {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeletePost")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int) error); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPoster_DeletePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePost'
type MockPoster_DeletePost_Call struct {
	*mock.Call
}

// DeletePost is a helper method to define mock.On call
//   - id int
func (_e *MockPoster_Expecter) DeletePost(id interface{}) *MockPoster_DeletePost_Call {
	return &MockPoster_DeletePost_Call{Call: _e.mock.On("DeletePost", id)}
}

func (_c *MockPoster_DeletePost_Call) Run(run func(id int)) *MockPoster_DeletePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPoster_DeletePost_Call) Return(err error) *MockPoster_DeletePost_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPoster_DeletePost_Call) RunAndReturn(run func(id int) error) *MockPoster_DeletePost_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllPosts provides a mock function for the type MockPoster
func (_mock *MockPoster) GetAllPosts() ([]models.OutputPost, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllPosts")
	}

	var r0 []models.OutputPost
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]models.OutputPost, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []models.OutputPost); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.OutputPost)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPoster_GetAllPosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllPosts'
type MockPoster_GetAllPosts_Call struct {
	*mock.Call
}

// GetAllPosts is a helper method to define mock.On call
func (_e *MockPoster_Expecter) GetAllPosts() *MockPoster_GetAllPosts_Call {
	return &MockPoster_GetAllPosts_Call{Call: _e.mock.On("GetAllPosts")}
}

func (_c *MockPoster_GetAllPosts_Call) Run(run func()) *MockPoster_GetAllPosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPoster_GetAllPosts_Call) Return(outputPosts []models.OutputPost, err error) *MockPoster_GetAllPosts_Call {
	_c.Call.Return(outputPosts, err)
	return _c
}

func (_c *MockPoster_GetAllPosts_Call) RunAndReturn(run func() ([]models.OutputPost, error)) *MockPoster_GetAllPosts_Call {
	_c.Call.Return(run)
	return _c
}

// GetPost provides a mock function for the type MockPoster
func (_mock *MockPoster) GetPost(id int) (models.OutputPost, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetPost")
	}

	var r0 models.OutputPost
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int) (models.OutputPost, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(int) models.OutputPost); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(models.OutputPost)
	}
	if returnFunc, ok := ret.Get(1).(func(int) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPoster_GetPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPost'
type MockPoster_GetPost_Call struct {
	*mock.Call
}

// GetPost is a helper method to define mock.On call
//   - id int
func (_e *MockPoster_Expecter) GetPost(id interface{}) *MockPoster_GetPost_Call {
	return &MockPoster_GetPost_Call{Call: _e.mock.On("GetPost", id)}
}

func (_c *MockPoster_GetPost_Call) Run(run func(id int)) *MockPoster_GetPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPoster_GetPost_Call) Return(outputPost models.OutputPost, err error) *MockPoster_GetPost_Call {
	_c.Call.Return(outputPost, err)
	return _c
}

func (_c *MockPoster_GetPost_Call) RunAndReturn(run func(id int) (models.OutputPost, error)) *MockPoster_GetPost_Call {
	_c.Call.Return(run)
	return _c
}

// PatchPost provides a mock function for the type MockPoster
func (_mock *MockPoster) PatchPost(id int, inputPost models.InputPost) (models.OutputPost, error) {
	ret := _mock.Called(id, inputPost)

	if len(ret) == 0 {
		panic("no return value specified for PatchPost")
	}

	var r0 models.OutputPost
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int, models.InputPost) (models.OutputPost, error)); ok {
		return returnFunc(id, inputPost)
	}
	if returnFunc, ok := ret.Get(0).(func(int, models.InputPost) models.OutputPost); ok {
		r0 = returnFunc(id, inputPost)
	} else {
		r0 = ret.Get(0).(models.OutputPost)
	}
	if returnFunc, ok := ret.Get(1).(func(int, models.InputPost) error); ok {
		r1 = returnFunc(id, inputPost)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPoster_PatchPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchPost'
type MockPoster_PatchPost_Call struct {
	*mock.Call
}

// PatchPost is a helper method to define mock.On call
//   - id int
//   - inputPost models.InputPost
func (_e *MockPoster_Expecter) PatchPost(id interface{}, inputPost interface{}) *MockPoster_PatchPost_Call {
	return &MockPoster_PatchPost_Call{Call: _e.mock.On("PatchPost", id, inputPost)}
}

func (_c *MockPoster_PatchPost_Call) Run(run func(id int, inputPost models.InputPost)) *MockPoster_PatchPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 models.InputPost
		if args[1] != nil {
			arg1 = args[1].(models.InputPost)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPoster_PatchPost_Call) Return(outputPost models.OutputPost, err error) *MockPoster_PatchPost_Call {
	_c.Call.Return(outputPost, err)
	return _c
}

func (_c *MockPoster_PatchPost_Call) RunAndReturn(run func(id int, inputPost models.InputPost) (models.OutputPost, error)) *MockPoster_PatchPost_Call {
	_c.Call.Return(run)
	return _c
}

// SavePost provides a mock function for the type MockPoster
func (_mock *MockPoster) SavePost(post models.InputPost) (models.OutputPost, error) {
	ret := _mock.Called(post)

	if len(ret) == 0 {
		panic("no return value specified for SavePost")
	}

	var r0 models.OutputPost
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(models.InputPost) (models.OutputPost, error)); ok {
		return returnFunc(post)
	}
	if returnFunc, ok := ret.Get(0).(func(models.InputPost) models.OutputPost); ok {
		r0 = returnFunc(post)
	} else {
		r0 = ret.Get(0).(models.OutputPost)
	}
	if returnFunc, ok := ret.Get(1).(func(models.InputPost) error); ok {
		r1 = returnFunc(post)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPoster_SavePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SavePost'
type MockPoster_SavePost_Call struct {
	*mock.Call
}

// SavePost is a helper method to define mock.On call
//   - post models.InputPost
func (_e *MockPoster_Expecter) SavePost(post interface{}) *MockPoster_SavePost_Call {
	return &MockPoster_SavePost_Call{Call: _e.mock.On("SavePost", post)}
}

func (_c *MockPoster_SavePost_Call) Run(run func(post models.InputPost)) *MockPoster_SavePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 models.InputPost
		if args[0] != nil {
			arg0 = args[0].(models.InputPost)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPoster_SavePost_Call) Return(outputPost models.OutputPost, err error) *MockPoster_SavePost_Call {
	_c.Call.Return(outputPost, err)
	return _c
}

func (_c *MockPoster_SavePost_Call) RunAndReturn(run func(post models.InputPost) (models.OutputPost, error)) *MockPoster_SavePost_Call {
	_c.Call.Return(run)
	return _c
}
